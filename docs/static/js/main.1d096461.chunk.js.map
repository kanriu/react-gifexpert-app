{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","item","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"iNA4BeA,EAzBK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cACrB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAaA,OACE,sBAAMC,SATa,SAACC,GACpBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAWP,GAAX,mBAA0BO,OACxCN,EAAc,MAKhB,SACE,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAdhB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,a,+BCNdG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,iDACiCF,EADjC,+DAEFG,MAAMD,GAFJ,cAEfE,EAFe,gBAGEA,EAAKC,OAHP,uBAGbC,EAHa,EAGbA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GACrB,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXT,IAAKO,EAAIG,OAAOC,iBAAiBX,QAThB,kBAadK,GAbc,4CAAH,sDCWLO,EATK,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOT,EAAU,EAAVA,IAC5B,OACE,sBAAKa,UAAU,2DAAf,UACE,qBAAKC,IAAKd,EAAKe,IAAKN,IACpB,4BAAIA,QCiBKO,EAnBC,SAAC,GAAkB,IAAhBlB,EAAe,EAAfA,SACjB,ECF0B,SAACA,GAC3B,MAA0Bd,mBAAS,CACjCoB,KAAM,GACNa,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KASA,OAJAC,qBAAU,WACRvB,EAAQC,GAAUuB,MAAK,SAACC,GAAD,OAAUH,EAAS,CAAEf,KAAMkB,EAAML,SAAS,SAChE,CAACnB,IAEGoB,EDR2BK,CAAazB,GAAjCY,EAAd,EAAQN,KAAca,EAAtB,EAAsBA,QAEtB,OACE,qCACE,6BAAKnB,IACJmB,EACC,wCAEA,qBAAKJ,UAAU,YAAf,SACGH,EAAOJ,KAAI,SAACkB,GACX,OAAO,cAAC,EAAD,eAA+BA,GAAbA,EAAKhB,aEU3BiB,EArBM,WACnB,MAAoCzC,mBAAS,CAAC,cAA9C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAMA,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BACG2C,EAAWpB,KAAI,SAACR,GACf,OAAO,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,YCZ/B6B,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.1d096461.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst AddCategory = ({ setCategories }) => {\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n  const handleInputChange = (e) => {\r\n    setInputValue(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (inputValue.trim().length > 2) {\r\n      setCategories((cats) => [inputValue, ...cats]);\r\n      setInputValue(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input type=\"text\" value={inputValue} onChange={handleInputChange} />\r\n    </form>\r\n  );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default AddCategory;\r\n","export const getGifs = async (category) => {\r\n  const url = `https://api.giphy.com/v1/gifs/search?q=${category}&limit=10&api_key=N84J4ppLEVBL5TbAqKRR9XBy4JQ8kF3a`;\r\n  const resp = await fetch(url);\r\n  const { data } = await resp.json();\r\n\r\n  const gifs = data.map((img) => {\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      url: img.images.downsized_medium.url,\r\n    };\r\n  });\r\n\r\n  return gifs;\r\n};\r\n","import React from \"react\";\r\n\r\nconst GifGridItem = ({ title, url }) => {\r\n  return (\r\n    <div className=\"card animate__animated animate__fadeIn animate__delay-1s\">\r\n      <img src={url} alt={title} />\r\n      <p>{title}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GifGridItem;\r\n","import React from \"react\";\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\nimport GifGridItem from \"./GifGridItem\";\r\n\r\nconst GifGrid = ({ category }) => {\r\n  const { data: images, loading } = useFetchGifs(category);\r\n\r\n  return (\r\n    <>\r\n      <h3>{category}</h3>\r\n      {loading ? (\r\n        <p>Loading</p>\r\n      ) : (\r\n        <div className=\"card-grid\">\r\n          {images.map((item) => {\r\n            return <GifGridItem key={item.id} {...item} />;\r\n          })}\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GifGrid;\r\n","import { useEffect, useState } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n\r\n  useEffect(() => {\r\n    getGifs(category).then((imgs) => setState({ data: imgs, loading: false }));\r\n  }, [category]);\r\n\r\n  return state;\r\n};\r\n","import React, { useState } from \"react\";\r\nimport AddCategory from \"./components/AddCategory\";\r\nimport GifGrid from \"./components/GifGrid\";\r\n\r\nconst GifExpertApp = () => {\r\n  const [categories, setCategories] = useState([\"One Punch\"]);\r\n\r\n  // const handleAdd = () => {\r\n  //   setCategories([...categories, \"Naruto\"]);\r\n  // };\r\n\r\n  return (\r\n    <>\r\n      <h2>GifExpertApp</h2>\r\n      <AddCategory setCategories={setCategories} />\r\n      <hr />\r\n      <ol>\r\n        {categories.map((category) => {\r\n          return <GifGrid key={category} category={category} />;\r\n        })}\r\n      </ol>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GifExpertApp;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"animate.css\";\nimport GifExpertApp from \"./GifExpertApp\";\n\nReactDOM.render(<GifExpertApp />, document.getElementById(\"root\"));\n"],"sourceRoot":""}